{"ast":null,"code":"//firebase account: shappovala@gmail.com\nimport { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc, collection, writeBatch, query, getDocs } from 'firebase/firestore'; // Your web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA1D434m3xoFS8NJJ3xOpoe-HfgIUdJ5_0\",\n  authDomain: \"capstone-f7203.firebaseapp.com\",\n  projectId: \"capstone-f7203\",\n  storageBucket: \"capstone-f7203.appspot.com\",\n  messagingSenderId: \"770752780969\",\n  appId: \"1:770752780969:web:eb06844e9c24dadbcc67b8\"\n}; // Initialize Firebase\n\nconst firebaseApp = initializeApp(firebaseConfig);\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);\nexport const db = getFirestore();\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd, field) => {\n  const collectionRef = collection(db, collectionKey);\n  const batch = writeBatch(db);\n  objectsToAdd.forEach(object => {\n    const docRef = doc(collectionRef, object.title.toLowerCase());\n    batch.set(docRef, object);\n  });\n  await batch.commit();\n  console.log('done');\n};\nexport const getCategoriesAndDocuments = async () => {\n  const collectionRef = collection(db, 'categories');\n  const q = query(collectionRef);\n  const querySnapshot = await getDocs(q);\n  const categoryMap = querySnapshot.docs;\n};\nexport const createUserDocumentfromAuth = async function (userAuth) {\n  let additionalInformation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!userAuth) return;\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  const userSnapshot = await getDoc(userDocRef);\n\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation\n      });\n    } catch (error) {\n      console.log('error creating the user', error.message);\n    }\n  }\n\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await signInWithEmailAndPassword(auth, email, password);\n};\nexport const signOutUser = async () => await signOut(auth);\nexport const onAuthStateChangedListener = callback => {\n  onAuthStateChanged(auth, callback);\n};","map":{"version":3,"sources":["/var/www/capstone/crwn-clothing/src/utils/firebase/firebase.utils.js"],"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","onAuthStateChanged","getFirestore","doc","getDoc","setDoc","collection","writeBatch","query","getDocs","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","googleProvider","setCustomParameters","prompt","auth","signInWithGooglePopup","signInWithGoogleRedirect","db","addCollectionAndDocuments","collectionKey","objectsToAdd","field","collectionRef","batch","forEach","object","docRef","title","toLowerCase","set","commit","console","log","getCategoriesAndDocuments","q","querySnapshot","categoryMap","docs","createUserDocumentfromAuth","userAuth","additionalInformation","userDocRef","uid","userSnapshot","exists","displayName","email","createdAt","Date","error","message","createAuthUserWithEmailAndPassword","password","signInAuthUserWithEmailAndPassword","signOutUser","onAuthStateChangedListener","callback"],"mappings":"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","sourcesContent":["//firebase account: shappovala@gmail.com\nimport {initializeApp} from 'firebase/app';\nimport {\n  getAuth, \n  signInWithRedirect, \n  signInWithPopup, \n  GoogleAuthProvider, \n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  signOut,\n  onAuthStateChanged,\n} from 'firebase/auth';\nimport {\n    getFirestore, \n    doc, \n    getDoc, \n    setDoc, \n    collection,\n    writeBatch, \n    query,\n    getDocs\n  } from 'firebase/firestore';\n\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyA1D434m3xoFS8NJJ3xOpoe-HfgIUdJ5_0\",\n    authDomain: \"capstone-f7203.firebaseapp.com\",\n    projectId: \"capstone-f7203\",\n    storageBucket: \"capstone-f7203.appspot.com\",\n    messagingSenderId: \"770752780969\",\n    appId: \"1:770752780969:web:eb06844e9c24dadbcc67b8\"\n  };\n  \n  // Initialize Firebase\n  const firebaseApp = initializeApp(firebaseConfig);\n\n  const googleProvider = new GoogleAuthProvider();\n  googleProvider.setCustomParameters({\n      prompt: 'select_account'\n  });\n\n\n  export const auth = getAuth();\n  export const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\n  export const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);\n\n\n  export const db = getFirestore();\n\n  export const addCollectionAndDocuments = async (\n    collectionKey, \n    objectsToAdd,\n    field\n    ) => {\n    const collectionRef = collection(db, collectionKey);\n    const batch = writeBatch(db);\n\n    objectsToAdd.forEach((object) => {\n      const docRef = doc(collectionRef, object.title.toLowerCase());\n      batch.set(docRef, object);\n    });\n\n    await batch.commit();\n\n    console.log('done');\n\n  }\n\n  export const getCategoriesAndDocuments =  async() => {\n    const collectionRef = collection(db, 'categories');\n    const q = query(collectionRef);\n\n    const querySnapshot = await getDocs(q);\n    const categoryMap = querySnapshot.docs\n\n\n  }\n\n\n  export const createUserDocumentfromAuth = async(\n    userAuth, \n    additionalInformation={}\n    ) => {\n\n      if (!userAuth) return;\n\n      const userDocRef = doc(db, 'users', userAuth.uid);\n\n      const userSnapshot = await getDoc(userDocRef);\n\n      if (!userSnapshot.exists()) {\n          const {displayName, email} = userAuth;\n          const createdAt = new Date();\n\n          try {\n            await setDoc(userDocRef, {\n                displayName,\n                email,\n                createdAt,\n                ...additionalInformation\n            });\n          } catch (error) {\n            console.log('error creating the user' , error.message);\n          }\n\n      }\n\n\n      return userDocRef;\n\n\n\n  };\n\n\n  export const createAuthUserWithEmailAndPassword = async(email, password) => {\n    if (!email || !password) return;\n    return await createUserWithEmailAndPassword(auth, email, password);\n  }\n\n  export const signInAuthUserWithEmailAndPassword = async(email, password) => {\n    if (!email || !password) return;\n    return await signInWithEmailAndPassword(auth, email, password);\n  }\n\n  export const signOutUser = async () => await signOut(auth);\n\n  export const onAuthStateChangedListener = (callback) => {\n    \n\n    onAuthStateChanged(auth, callback);\n  } \n"]},"metadata":{},"sourceType":"module"}